# Name of the workflow as it appears in the GitHub Actions UI
name: Terraform AWS Deployment (Access Key Auth)

# Define when the workflow should run
on:
  push:
    # Trigger the workflow on pushes to the 'main' branch
    branches:
      - dev

# Permissions granted to the GITHUB_TOKEN for this workflow run.
# 'contents: read' is typically needed for 'actions/checkout'.
# No 'id-token: write' is needed as we are using static access keys.
permissions:
  contents: read

# Define the jobs that make up this workflow
jobs:
  # Define a job named 'terraform_deploy'
  terraform_deploy:
    # Specify the runner environment for this job
    runs-on: ubuntu-latest

    # Define the steps for this job
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4 # Uses the action to checkout your repository's code

      # Step 2: Configure AWS credentials using the provided secrets
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # AWS Access Key ID pulled from GitHub Secrets
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS Secret Access Key pulled from GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # The AWS region where your resources will be deployed
          aws-region: ap-southeast-1 # Change this to your desired AWS region

      # Step 3: Set up Terraform CLI
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          # Specify the version of Terraform to use
          terraform_version: 1.5.0 # You can specify a different version if needed

      # Step 4: Initialize Terraform
      # This step initializes the backend, downloads providers, and sets up modules.
      - name: Terraform Init
        run: terraform init
        # Ensure the working directory is set if your .tf files are not at the root
        # working-directory: ./path/to/your/terraform/code

      # Step 5: Format Terraform files
      # This step ensures consistent formatting across your Terraform code.
      - name: Terraform Fmt
        run: terraform fmt -check
        # Add '-check' to fail if files are not formatted, useful in CI/CD.
        # Remove '-check' if you want it to just format files (and commit them later).
        # working-directory: ./path/to/your/terraform/code

      # Step 6: Validate Terraform configuration
      # This step validates the syntax and basic consistency of your Terraform configuration.
      - name: Terraform Validate
        run: terraform validate
        # working-directory: ./path/to/your/terraform/code

      # Step 7: Generate a Terraform plan
      # This step creates an execution plan, showing what changes Terraform will make.
      - name: Terraform Plan
        run: terraform plan -no-color -input=false
        # -no-color: Suppresses color codes in the output for better logging.
        # -input=false: Prevents Terraform from prompting for input.
        # You might want to save the plan to a file for 'terraform apply -auto-approve <PLAN_FILE>'
        # For example: terraform plan -out=tfplan
        # working-directory: ./path/to/your/terraform/code

      # Step 8: Apply Terraform changes
      # This step applies the changes defined in the plan to your AWS environment.
      # !! DANGER !! -auto-approve means it will apply without manual confirmation.
      # Only use -auto-approve in trusted environments or after manual review.
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        # If you saved a plan file in the 'Plan' step, you'd use:
        # run: terraform apply -auto-approve tfplan
        # working-directory: ./path/to/your/terraform/code